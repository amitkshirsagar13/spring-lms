buildscript {
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath "io.spring.gradle:dependency-management-plugin:springGradleDependancyManager"
		classpath('se.transmode.gradle:gradle-docker:1.2')
		classpath 'com.bmuschko:gradle-docker-plugin:3.2.1'
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
	}
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
// import task classes
import com.bmuschko.gradle.docker.tasks.image.*

allprojects {
	
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/milestone" }
	}
	
	apply plugin: "io.spring.dependency-management"
	
	dependencyManagement {
		imports {
			mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
			mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudDependencies}")
		}
	}

}
subprojects {
	
	apply plugin: 'org.springframework.boot'
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'docker'

	
	sourceCompatibility = 1.8
	dependencies {
		compile('org.springframework.cloud:spring-cloud-starter')
		compile('org.springframework.cloud:spring-cloud-starter-config')
		
		compile('org.springframework.boot:spring-boot-starter-actuator')
		compile('org.springframework.boot:spring-boot-starter-security')
		
		compile('org.springframework.boot:spring-boot-starter-web')
		compile('com.google.guava:guava:23.0')
		
		compile('org.springframework.boot:spring-boot-starter-aop')
		
		compile("org.springframework.boot:spring-boot-devtools")
		testCompile('org.springframework.boot:spring-boot-starter-test')
	}
	
	task configcheckCopy(type: Copy) {
		from('src/main/docker')
		into('build/docker')
		include('*.sh')
	}
	
	task buildDocker(type: Docker, dependsOn: build) {
		//push = true
		applicationName = jar.baseName
		dockerfile = file('src/main/docker/Dockerfile')
		doFirst {
		  copy {
			from jar
			into stageDir
		  }
		}
	  }
	  
	  buildDocker {
		  dependsOn configcheckCopy
	  }
	
	
}